/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import components.TextLineNumber;
import controller.Compile;
import controller.Configuracion;
import controller.Run;
import controller.Sintaxis;
import java.nio.file.CopyOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.Set;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author momomeme
 */
public class NewApplication extends javax.swing.JFrame {

    /**
     * Creates new form NewApplication
     */
    public NewApplication() {
        initComponents();
        jFileChooser1.setCurrentDirectory(new File(System.getProperty("user.home")));
        jFileChooser1.setFileSelectionMode(jFileChooser1.FILES_AND_DIRECTORIES);
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("c", ".c"));
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("c++", ".cpp"));
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("cc", ".cc"));
        jFileChooser1.setAcceptAllFileFilterUsed(true);
        this.jTextAreaSalida.setComponentPopupMenu(jPopupMenuSalida);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jPopupMenuSalida = new javax.swing.JPopupMenu();
        jMenuItemClear = new javax.swing.JMenuItem();
        jDialogConfiguracion = new javax.swing.JDialog();
        jTextFieldPathCompilador = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldArgumentos = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane(doc);
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaSalida = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        nuevoProyectoMenu = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        runMenuItem = new javax.swing.JMenuItem();
        compilarMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.CutAction());
        copyMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.CopyAction());
        pasteMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.PasteAction());
        jMenuConfiguracion = new javax.swing.JMenu();
        jMenuItemConfiguracion = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jLabel1.setText("IdeC es un editor de Lenguaje C/C++\\n realizado en Java");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jMenuItemClear.setText("Limpiar");
        jMenuItemClear.setToolTipText("");
        jMenuItemClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearActionPerformed(evt);
            }
        });
        jPopupMenuSalida.add(jMenuItemClear);

        jDialogConfiguracion.setTitle("Configuracion");

        jLabel4.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel4.setText("Path Compilador");

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel5.setText("Argumentos");

        javax.swing.GroupLayout jDialogConfiguracionLayout = new javax.swing.GroupLayout(jDialogConfiguracion.getContentPane());
        jDialogConfiguracion.getContentPane().setLayout(jDialogConfiguracionLayout);
        jDialogConfiguracionLayout.setHorizontalGroup(
            jDialogConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConfiguracionLayout.createSequentialGroup()
                .addGroup(jDialogConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDialogConfiguracionLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogConfiguracionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jDialogConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jDialogConfiguracionLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPathCompilador, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDialogConfiguracionLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldArgumentos, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogConfiguracionLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(180, 180, 180))
        );
        jDialogConfiguracionLayout.setVerticalGroup(
            jDialogConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConfiguracionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPathCompilador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGroup(jDialogConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogConfiguracionLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogConfiguracionLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jTextFieldArgumentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IdeC");

        jTextPane1.setToolTipText("");
        jScrollPane1.setViewportView(jTextPane1);
        TextLineNumber tln = new TextLineNumber(jTextPane1);
        jScrollPane1.setRowHeaderView( tln );

        jScrollPane2.setViewportView(jTree1);

        jTextAreaSalida.setEditable(false);
        jTextAreaSalida.setColumns(20);
        jTextAreaSalida.setRows(5);
        jScrollPane3.setViewportView(jTextAreaSalida);

        jLabel2.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        jLabel2.setText("Salida");

        jLabel3.setText("Conección");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        nuevoProyectoMenu.setText("Nuevo Proyecto");
        nuevoProyectoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoProyectoMenuActionPerformed(evt);
            }
        });
        fileMenu.add(nuevoProyectoMenu);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        runMenu.setText("Run");

        runMenuItem.setText("Run");
        runMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(runMenuItem);

        compilarMenuItem.setText("Compìle");
        compilarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compilarMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(compilarMenuItem);

        menuBar.add(runMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        menuBar.add(editMenu);

        jMenuConfiguracion.setText("Configuracion");
        jMenuConfiguracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuConfiguracionActionPerformed(evt);
            }
        });

        jMenuItemConfiguracion.setText("Configuracion");
        jMenuItemConfiguracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConfiguracionActionPerformed(evt);
            }
        });
        jMenuConfiguracion.add(jMenuItemConfiguracion);

        menuBar.add(jMenuConfiguracion);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int returnVal = jFileChooser1.showOpenDialog(this);
        this.jTextPane1.setText("");
        
        String cadena;
    if (returnVal == jFileChooser1.APPROVE_OPTION) {
        File file = jFileChooser1.getSelectedFile();
        try {
          // What to do with the file, e.g. display it in a TextArea
          
          //jTextPane1.read( new FileReader( file.getAbsolutePath() ), null );
          FileReader f = new FileReader(file);
           BufferedReader b = new BufferedReader(f);
           int contador=0;
        while((cadena = b.readLine())!=null) {
            
            for(int c = 0; c < cadena.length() ; c++){
               
              try {
                  abrirarchivo = true;
                  doc.insertString(contador++, ""+cadena.charAt(c), attr);
                  
              } catch (BadLocationException ex) {
                  Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
              }
            }
                
              try {  
                  doc.insertString(contador++, "\n", attr);
              } catch (BadLocationException ex) {
                  Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
              }
        }
        b.close();
          
        } catch (IOException ex) {
          System.out.println("problem accessing file"+file.getAbsolutePath());
        }
    } else {
        System.out.println("File access cancelled by user.");
    }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        
    }//GEN-LAST:event_fileMenuActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        int returnVal = jFileChooser1.showSaveDialog(this);
    if (returnVal == jFileChooser1.APPROVE_OPTION) {
        FileWriter fw ;
        File file = jFileChooser1.getSelectedFile();
        try {
            
            
           switch(jFileChooser1.getFileFilter().getDescription()){
               case "c":
                   System.out.println("---------------");
                   fw = new FileWriter(jFileChooser1.getSelectedFile()+".c");
                   break;
               case "c++":
                   fw = new FileWriter(jFileChooser1.getSelectedFile()+".cpp");
                   break;
               case "cc":
                   fw = new FileWriter(jFileChooser1.getSelectedFile()+".cc");
                   break;
               default :
                   fw = new FileWriter(jFileChooser1.getSelectedFile()+".cpp");
                   break;
                   
           }
            
             System.out.println("----------name " + jFileChooser1.getSelectedFile().getName());
            
            fw.write(jTextPane1.getText());
            fw.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    } else {
        System.out.println("File access cancelled by user.");
    }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        this.jDialog1.setSize(450, 150);
        this.jDialog1.dispose();
        this.jDialog1.setEnabled(true);
        this.jDialog1.setVisible(true);
        
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        
        
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void compilarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compilarMenuItemActionPerformed
        Compile compile = new Compile();
        
        int lugar = this.jFileChooser1.getSelectedFile().getName().lastIndexOf('.');
        String filename = this.jFileChooser1.getSelectedFile().getName().substring(0, lugar);
        String salida = compile.compile(this.jFileChooser1.getSelectedFile().getAbsolutePath(), filename, this.jFileChooser1.getSelectedFile().getParent());
        
        this.jTextAreaSalida.setText(salida);
    }//GEN-LAST:event_compilarMenuItemActionPerformed

    private void runMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMenuItemActionPerformed
        Run run = new Run();
        
        int lugar = this.jFileChooser1.getSelectedFile().getName().lastIndexOf('.');
        String filename = this.jFileChooser1.getSelectedFile().getName().substring(0, lugar);
        String salida = run.run(filename, this.jFileChooser1.getSelectedFile().getParent());
        this.jTextAreaSalida.setText(salida);
    }//GEN-LAST:event_runMenuItemActionPerformed

    private void jMenuItemClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearActionPerformed
        this.jTextAreaSalida.setText("");
    }//GEN-LAST:event_jMenuItemClearActionPerformed

    private void jMenuConfiguracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuConfiguracionActionPerformed
       
        
    }//GEN-LAST:event_jMenuConfiguracionActionPerformed

    private void jMenuItemConfiguracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConfiguracionActionPerformed
         Configuracion config = new Configuracion();
        
        this.jTextFieldPathCompilador.setText(config.leerPropiedad("pathcompilador"));
        this.jTextFieldArgumentos.setText(config.leerPropiedad("argumentos"));
        this.jDialogConfiguracion.setSize(450, 150);
        this.jDialogConfiguracion.dispose();
        this.jDialogConfiguracion.setEnabled(true);
        this.jDialogConfiguracion.setVisible(true);
    }//GEN-LAST:event_jMenuItemConfiguracionActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         Configuracion config = new Configuracion();
        
        config.escribirPropiedad("pathcompilador",this.jTextFieldPathCompilador.getText());
        config.escribirPropiedad("argumentos",this.jTextFieldArgumentos.getText());
        this.jDialogConfiguracion.setEnabled(false);
        this.jDialogConfiguracion.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void nuevoProyectoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoProyectoMenuActionPerformed
           int returnVal = jFileChooser1.showOpenDialog(this);
        this.jTextPane1.setText("");
        
        String cadena;
    if (returnVal == jFileChooser1.APPROVE_OPTION) {
        File file = jFileChooser1.getCurrentDirectory();
        Path FROM = Paths.get(System.getProperty("user.dir")+"/TemplateProject/Makefile");
        Path TO = null;
               try {
                   TO = Paths.get(jFileChooser1.getSelectedFile().getCanonicalPath());
                   System.out.println("----------path------"+ jFileChooser1.getSelectedFile().getCanonicalPath());
               } catch (IOException ex) {
                   Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
               }
       
        //sobreescribir el fichero de destino, si existe, y copiar
        // los atributos, incluyendo los permisos rwx
        CopyOption[] options = new CopyOption[]{
          StandardCopyOption.REPLACE_EXISTING,
          StandardCopyOption.COPY_ATTRIBUTES
        }; 
        Set<PosixFilePermission> perms = PosixFilePermissions.fromString("rwxrwxrwx");
        FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(perms);
        
               try {
                   Files.deleteIfExists(Paths.get(jFileChooser1.getSelectedFile().getCanonicalPath()+"/inc"));
                   Files.deleteIfExists(Paths.get(jFileChooser1.getSelectedFile().getCanonicalPath()+"/src"));
                   Files.deleteIfExists(Paths.get(jFileChooser1.getSelectedFile().getCanonicalPath()+"/Makefile"));
                   Files.createDirectory(Paths.get(jFileChooser1.getSelectedFile().getCanonicalPath()+"/inc"), attr);
                   Files.createDirectory(Paths.get(jFileChooser1.getSelectedFile().getCanonicalPath()+"/src"), attr);
                   Files.copy(FROM, Paths.get(jFileChooser1.getSelectedFile().getCanonicalPath()+"/Makefile"), options);
                   
               } catch (IOException ex) {
                   Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
               }
        System.out.println("-------userdir----------"+System.getProperty("user.dir"));
        
    } else {
        System.out.println("Directorio cancelado por el usuario");
    }
        
    }//GEN-LAST:event_nuevoProyectoMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem compilarMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialogConfiguracion;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenuConfiguracion;
    private javax.swing.JMenuItem jMenuItemClear;
    private javax.swing.JMenuItem jMenuItemConfiguracion;
    private javax.swing.JPopupMenu jPopupMenuSalida;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextAreaSalida;
    private javax.swing.JTextField jTextFieldArgumentos;
    private javax.swing.JTextField jTextFieldPathCompilador;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem nuevoProyectoMenu;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem runMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    
    final StyleContext cont = StyleContext.getDefaultStyleContext();
final AttributeSet attr = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.RED);
final AttributeSet attrBlack = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.BLACK);
final AttributeSet attrGray = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.GRAY);
final AttributeSet attrBlue = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.BLUE);
final AttributeSet attrGreen = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.GREEN);
final AttributeSet attrBoldBlack = cont.addAttribute(cont.getEmptySet(), StyleConstants.Bold, Color.BLACK);
final AttributeSet attrItalic = cont.addAttribute(cont.getEmptySet(), StyleConstants.Italic, Boolean.TRUE);

DefaultStyledDocument doc = new DefaultStyledDocument() {
    Sintaxis sintaxis = new Sintaxis();
    int interruptor = 0;
    int interruptorcomentario = 0;
    int comentariosimple = 0;
    int iniciocomentario = 0;
    int fincomentario = 0; 
    
    
    public void insertString (int offset, String str, AttributeSet a) throws BadLocationException {
        
        if(abrirarchivo){
            abrirarchivo = false;
        }else{
            str = sintaxis.ControllSintaxis(str);
        }
        
        
        
        super.insertString(offset, str , a);
        String text = getText(0, getLength());
        
        int before = findLastNonWordChar(text, offset);
     
        if (before < 0) before = 0;
        int after = findFirstNonWordChar(text, offset + str.length());
     
        int wordL = before;
        int wordR = before;
        
        
        
switch(interruptorcomentario ){
    case 0:
        while (wordR <= after) {
           
             if (wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")) {
            //System.out.println("la impresion se encontro  con doble barra "+text.substring(offset -2, offset));
                if(offset > 1 && text.substring(offset-2, offset).matches("(.)*(\\/\\/)")){
                    
                   
                    comentariosimple = wordL - 1 ;
                    interruptorcomentario = 1;
                   
                }else{
                    
                    
                        if(offset > 1 && text.substring(offset-2, offset).matches("(.)*(\\/\\*)")){
                            System.out.println("la impresion se encontro  con barra asterisco");
                            iniciocomentario = wordL - 1;
                            interruptorcomentario = 2;
                        }else{
                     
                            if(text.substring(wordL, wordR).matches("(\\W)*(#include|#define|#if|auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|size_t|volatile|do|if|static|while|len|NULL|FILE)")){
                                setCharacterAttributes(wordL, wordR - wordL, attr, false);

                            }else{

                                if(text.substring(wordL, wordR).matches("(\\W)*(printf|scanf|fopen|fclose|feof|fgetc|fegts|fmod|getch|system|time|acos|asin|atan|ceil|cos|cosh|exp|fabs|labs|floor|log|log10|pow|sin|sinh|sqrt|tan|tanh|abs|rand|srand|div|atof|atoi|atol|fprintf|fputc|fputs|fread|free|calloc|malloc|fscanf|fseek|ftell|fwrite|getc|print|getchar|gets|isalnum|isalpha|isascii|iscntrl|isdigit|isgraph|islower|isodigit|isprint|ispunct|isspace|isupper|isxdigit|strcmp|strcmpi|strcpy|strncpy|strlen|strset|strtok|toascii|tolower|toupper)")){
                                    setCharacterAttributes(wordL, wordR - wordL, attrBlue, false);

                                }else{

                                    setCharacterAttributes(wordL, wordR - wordL, attrBlack, false);
                                }

                            }
                        }    
                    wordL = wordR;
                }    
            }
           
            wordR++;
        }
        break;
    case 1: 
         
           setCharacterAttributes(comentariosimple, offset - comentariosimple, attrGray, false);
           setCharacterAttributes(comentariosimple, offset - comentariosimple, attrItalic, false); 
           
        if (str.equals("\n") ) {
                comentariosimple = 0;
                interruptorcomentario = 0;
            }
           break;
    case 2:
          setCharacterAttributes(iniciocomentario, offset - iniciocomentario, attrGray, false);
           setCharacterAttributes(iniciocomentario, offset - iniciocomentario, attrItalic, false); 
           if(offset > 2 && text.substring(offset-2, offset).matches("(\\W)*(\\*\\/)")){
                   
                        iniciocomentario = 0;
                        interruptorcomentario = 0;

                        System.out.println("finnnnnnn");
                        
                    }
            
        break;
            
        }

        
    }

    public void remove (int offs, int len) throws BadLocationException {
            super.remove(offs, len);

            String text = getText(0, getLength());
            int before = findLastNonWordChar(text, offs);
            if (before < 0) before = 0;
            int after = findFirstNonWordChar(text, offs);

            if (text.substring(before, after).matches("(\\W)*(#include|#define|#if|auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|size_t|volatile|do|if|static|while|len|NULL|FILE)")) {
                setCharacterAttributes(before, after - before, attr, false);
            } else {
                setCharacterAttributes(before, after - before, attrBlack, false);
            }
        }
    };
    private int findLastNonWordChar (String text, int index) {
        while (--index >= 0) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
        }
        return index;
    }

    private int findFirstNonWordChar (String text, int index) {
        while (index < text.length()) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
            index++;
        }
        return index;
    }
    
    boolean abrirarchivo = false;
    
}
